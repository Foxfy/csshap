#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace session1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="session1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAmenity(Amenity instance);
    partial void UpdateAmenity(Amenity instance);
    partial void DeleteAmenity(Amenity instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertAttraction(Attraction instance);
    partial void UpdateAttraction(Attraction instance);
    partial void DeleteAttraction(Attraction instance);
    partial void InsertCancellationPolicy(CancellationPolicy instance);
    partial void UpdateCancellationPolicy(CancellationPolicy instance);
    partial void DeleteCancellationPolicy(CancellationPolicy instance);
    partial void InsertCancellationRefundFee(CancellationRefundFee instance);
    partial void UpdateCancellationRefundFee(CancellationRefundFee instance);
    partial void DeleteCancellationRefundFee(CancellationRefundFee instance);
    partial void InsertCoupon(Coupon instance);
    partial void UpdateCoupon(Coupon instance);
    partial void DeleteCoupon(Coupon instance);
    partial void InsertDimDate(DimDate instance);
    partial void UpdateDimDate(DimDate instance);
    partial void DeleteDimDate(DimDate instance);
    partial void InsertItemAmenity(ItemAmenity instance);
    partial void UpdateItemAmenity(ItemAmenity instance);
    partial void DeleteItemAmenity(ItemAmenity instance);
    partial void InsertItemAttraction(ItemAttraction instance);
    partial void UpdateItemAttraction(ItemAttraction instance);
    partial void DeleteItemAttraction(ItemAttraction instance);
    partial void InsertItemPicture(ItemPicture instance);
    partial void UpdateItemPicture(ItemPicture instance);
    partial void DeleteItemPicture(ItemPicture instance);
    partial void InsertItemPrice(ItemPrice instance);
    partial void UpdateItemPrice(ItemPrice instance);
    partial void DeleteItemPrice(ItemPrice instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertItemType(ItemType instance);
    partial void UpdateItemType(ItemType instance);
    partial void DeleteItemType(ItemType instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertTransactionType(TransactionType instance);
    partial void UpdateTransactionType(TransactionType instance);
    partial void DeleteTransactionType(TransactionType instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::session1.Properties.Settings.Default.session1ConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Amenity> Amenities
		{
			get
			{
				return this.GetTable<Amenity>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<Attraction> Attractions
		{
			get
			{
				return this.GetTable<Attraction>();
			}
		}
		
		public System.Data.Linq.Table<CancellationPolicy> CancellationPolicies
		{
			get
			{
				return this.GetTable<CancellationPolicy>();
			}
		}
		
		public System.Data.Linq.Table<CancellationRefundFee> CancellationRefundFees
		{
			get
			{
				return this.GetTable<CancellationRefundFee>();
			}
		}
		
		public System.Data.Linq.Table<Coupon> Coupons
		{
			get
			{
				return this.GetTable<Coupon>();
			}
		}
		
		public System.Data.Linq.Table<DimDate> DimDates
		{
			get
			{
				return this.GetTable<DimDate>();
			}
		}
		
		public System.Data.Linq.Table<ItemAmenity> ItemAmenities
		{
			get
			{
				return this.GetTable<ItemAmenity>();
			}
		}
		
		public System.Data.Linq.Table<ItemAttraction> ItemAttractions
		{
			get
			{
				return this.GetTable<ItemAttraction>();
			}
		}
		
		public System.Data.Linq.Table<ItemPicture> ItemPictures
		{
			get
			{
				return this.GetTable<ItemPicture>();
			}
		}
		
		public System.Data.Linq.Table<ItemPrice> ItemPrices
		{
			get
			{
				return this.GetTable<ItemPrice>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<ItemType> ItemTypes
		{
			get
			{
				return this.GetTable<ItemType>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<TransactionType> TransactionTypes
		{
			get
			{
				return this.GetTable<TransactionType>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Amenities")]
	public partial class Amenity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private string _IconName;
		
		private EntitySet<ItemAmenity> _ItemAmenities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIconNameChanging(string value);
    partial void OnIconNameChanged();
    #endregion
		
		public Amenity()
		{
			this._ItemAmenities = new EntitySet<ItemAmenity>(new Action<ItemAmenity>(this.attach_ItemAmenities), new Action<ItemAmenity>(this.detach_ItemAmenities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconName", DbType="NVarChar(50)")]
		public string IconName
		{
			get
			{
				return this._IconName;
			}
			set
			{
				if ((this._IconName != value))
				{
					this.OnIconNameChanging(value);
					this.SendPropertyChanging();
					this._IconName = value;
					this.SendPropertyChanged("IconName");
					this.OnIconNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Amenity_ItemAmenity", Storage="_ItemAmenities", ThisKey="ID", OtherKey="AmenityID")]
		public EntitySet<ItemAmenity> ItemAmenities
		{
			get
			{
				return this._ItemAmenities;
			}
			set
			{
				this._ItemAmenities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemAmenities(ItemAmenity entity)
		{
			this.SendPropertyChanging();
			entity.Amenity = this;
		}
		
		private void detach_ItemAmenities(ItemAmenity entity)
		{
			this.SendPropertyChanging();
			entity.Amenity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTypes")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public UserType()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_Users", ThisKey="ID", OtherKey="UserTypeID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Areas")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private EntitySet<Attraction> _Attractions;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Area()
		{
			this._Attractions = new EntitySet<Attraction>(new Action<Attraction>(this.attach_Attractions), new Action<Attraction>(this.detach_Attractions));
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Attraction", Storage="_Attractions", ThisKey="ID", OtherKey="AreaID")]
		public EntitySet<Attraction> Attractions
		{
			get
			{
				return this._Attractions;
			}
			set
			{
				this._Attractions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Item", Storage="_Items", ThisKey="ID", OtherKey="AreaID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attractions(Attraction entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Attractions(Attraction entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attractions")]
	public partial class Attraction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private long _AreaID;
		
		private string _Name;
		
		private string _Address;
		
		private EntitySet<ItemAttraction> _ItemAttractions;
		
		private EntityRef<Area> _Area;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnAreaIDChanging(long value);
    partial void OnAreaIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Attraction()
		{
			this._ItemAttractions = new EntitySet<ItemAttraction>(new Action<ItemAttraction>(this.attach_ItemAttractions), new Action<ItemAttraction>(this.detach_ItemAttractions));
			this._Area = default(EntityRef<Area>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="BigInt NOT NULL")]
		public long AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attraction_ItemAttraction", Storage="_ItemAttractions", ThisKey="ID", OtherKey="AttractionID")]
		public EntitySet<ItemAttraction> ItemAttractions
		{
			get
			{
				return this._ItemAttractions;
			}
			set
			{
				this._ItemAttractions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Attraction", Storage="_Area", ThisKey="AreaID", OtherKey="ID", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Attractions.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Attractions.Add(this);
						this._AreaID = value.ID;
					}
					else
					{
						this._AreaID = default(long);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemAttractions(ItemAttraction entity)
		{
			this.SendPropertyChanging();
			entity.Attraction = this;
		}
		
		private void detach_ItemAttractions(ItemAttraction entity)
		{
			this.SendPropertyChanging();
			entity.Attraction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CancellationPolicies")]
	public partial class CancellationPolicy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private decimal _Commission;
		
		private EntitySet<CancellationRefundFee> _CancellationRefundFees;
		
		private EntitySet<ItemPrice> _ItemPrices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCommissionChanging(decimal value);
    partial void OnCommissionChanged();
    #endregion
		
		public CancellationPolicy()
		{
			this._CancellationRefundFees = new EntitySet<CancellationRefundFee>(new Action<CancellationRefundFee>(this.attach_CancellationRefundFees), new Action<CancellationRefundFee>(this.detach_CancellationRefundFees));
			this._ItemPrices = new EntitySet<ItemPrice>(new Action<ItemPrice>(this.attach_ItemPrices), new Action<ItemPrice>(this.detach_ItemPrices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commission", DbType="Decimal(5,2) NOT NULL")]
		public decimal Commission
		{
			get
			{
				return this._Commission;
			}
			set
			{
				if ((this._Commission != value))
				{
					this.OnCommissionChanging(value);
					this.SendPropertyChanging();
					this._Commission = value;
					this.SendPropertyChanged("Commission");
					this.OnCommissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CancellationPolicy_CancellationRefundFee", Storage="_CancellationRefundFees", ThisKey="ID", OtherKey="CancellationPolicyID")]
		public EntitySet<CancellationRefundFee> CancellationRefundFees
		{
			get
			{
				return this._CancellationRefundFees;
			}
			set
			{
				this._CancellationRefundFees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CancellationPolicy_ItemPrice", Storage="_ItemPrices", ThisKey="ID", OtherKey="CancellationPolicyID")]
		public EntitySet<ItemPrice> ItemPrices
		{
			get
			{
				return this._ItemPrices;
			}
			set
			{
				this._ItemPrices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CancellationRefundFees(CancellationRefundFee entity)
		{
			this.SendPropertyChanging();
			entity.CancellationPolicy = this;
		}
		
		private void detach_CancellationRefundFees(CancellationRefundFee entity)
		{
			this.SendPropertyChanging();
			entity.CancellationPolicy = null;
		}
		
		private void attach_ItemPrices(ItemPrice entity)
		{
			this.SendPropertyChanging();
			entity.CancellationPolicy = this;
		}
		
		private void detach_ItemPrices(ItemPrice entity)
		{
			this.SendPropertyChanging();
			entity.CancellationPolicy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CancellationRefundFees")]
	public partial class CancellationRefundFee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private long _CancellationPolicyID;
		
		private int _DaysLeft;
		
		private decimal _PenaltyPercentage;
		
		private EntityRef<CancellationPolicy> _CancellationPolicy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnCancellationPolicyIDChanging(long value);
    partial void OnCancellationPolicyIDChanged();
    partial void OnDaysLeftChanging(int value);
    partial void OnDaysLeftChanged();
    partial void OnPenaltyPercentageChanging(decimal value);
    partial void OnPenaltyPercentageChanged();
    #endregion
		
		public CancellationRefundFee()
		{
			this._CancellationPolicy = default(EntityRef<CancellationPolicy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CancellationPolicyID", DbType="BigInt NOT NULL")]
		public long CancellationPolicyID
		{
			get
			{
				return this._CancellationPolicyID;
			}
			set
			{
				if ((this._CancellationPolicyID != value))
				{
					if (this._CancellationPolicy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCancellationPolicyIDChanging(value);
					this.SendPropertyChanging();
					this._CancellationPolicyID = value;
					this.SendPropertyChanged("CancellationPolicyID");
					this.OnCancellationPolicyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysLeft", DbType="Int NOT NULL")]
		public int DaysLeft
		{
			get
			{
				return this._DaysLeft;
			}
			set
			{
				if ((this._DaysLeft != value))
				{
					this.OnDaysLeftChanging(value);
					this.SendPropertyChanging();
					this._DaysLeft = value;
					this.SendPropertyChanged("DaysLeft");
					this.OnDaysLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PenaltyPercentage", DbType="Decimal(5,2) NOT NULL")]
		public decimal PenaltyPercentage
		{
			get
			{
				return this._PenaltyPercentage;
			}
			set
			{
				if ((this._PenaltyPercentage != value))
				{
					this.OnPenaltyPercentageChanging(value);
					this.SendPropertyChanging();
					this._PenaltyPercentage = value;
					this.SendPropertyChanged("PenaltyPercentage");
					this.OnPenaltyPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CancellationPolicy_CancellationRefundFee", Storage="_CancellationPolicy", ThisKey="CancellationPolicyID", OtherKey="ID", IsForeignKey=true)]
		public CancellationPolicy CancellationPolicy
		{
			get
			{
				return this._CancellationPolicy.Entity;
			}
			set
			{
				CancellationPolicy previousValue = this._CancellationPolicy.Entity;
				if (((previousValue != value) 
							|| (this._CancellationPolicy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CancellationPolicy.Entity = null;
						previousValue.CancellationRefundFees.Remove(this);
					}
					this._CancellationPolicy.Entity = value;
					if ((value != null))
					{
						value.CancellationRefundFees.Add(this);
						this._CancellationPolicyID = value.ID;
					}
					else
					{
						this._CancellationPolicyID = default(long);
					}
					this.SendPropertyChanged("CancellationPolicy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Coupons")]
	public partial class Coupon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private string _CouponCode;
		
		private decimal _DiscountPercent;
		
		private decimal _MaximimDiscountAmount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnCouponCodeChanging(string value);
    partial void OnCouponCodeChanged();
    partial void OnDiscountPercentChanging(decimal value);
    partial void OnDiscountPercentChanged();
    partial void OnMaximimDiscountAmountChanging(decimal value);
    partial void OnMaximimDiscountAmountChanged();
    #endregion
		
		public Coupon()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CouponCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CouponCode
		{
			get
			{
				return this._CouponCode;
			}
			set
			{
				if ((this._CouponCode != value))
				{
					this.OnCouponCodeChanging(value);
					this.SendPropertyChanging();
					this._CouponCode = value;
					this.SendPropertyChanged("CouponCode");
					this.OnCouponCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountPercent", DbType="Decimal(4,1) NOT NULL")]
		public decimal DiscountPercent
		{
			get
			{
				return this._DiscountPercent;
			}
			set
			{
				if ((this._DiscountPercent != value))
				{
					this.OnDiscountPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercent = value;
					this.SendPropertyChanged("DiscountPercent");
					this.OnDiscountPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximimDiscountAmount", DbType="Decimal(10,2) NOT NULL")]
		public decimal MaximimDiscountAmount
		{
			get
			{
				return this._MaximimDiscountAmount;
			}
			set
			{
				if ((this._MaximimDiscountAmount != value))
				{
					this.OnMaximimDiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._MaximimDiscountAmount = value;
					this.SendPropertyChanged("MaximimDiscountAmount");
					this.OnMaximimDiscountAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimDates")]
	public partial class DimDate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.DateTime _Date;
		
		private int _Year;
		
		private int _Quarter;
		
		private int _Month;
		
		private string _MonthName;
		
		private int _DayOfMonth;
		
		private int _DayOfWeek;
		
		private string _DayName;
		
		private bool _isHoliday;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnQuarterChanging(int value);
    partial void OnQuarterChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnMonthNameChanging(string value);
    partial void OnMonthNameChanged();
    partial void OnDayOfMonthChanging(int value);
    partial void OnDayOfMonthChanged();
    partial void OnDayOfWeekChanging(int value);
    partial void OnDayOfWeekChanged();
    partial void OnDayNameChanging(string value);
    partial void OnDayNameChanged();
    partial void OnisHolidayChanging(bool value);
    partial void OnisHolidayChanged();
    #endregion
		
		public DimDate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quarter", DbType="Int NOT NULL")]
		public int Quarter
		{
			get
			{
				return this._Quarter;
			}
			set
			{
				if ((this._Quarter != value))
				{
					this.OnQuarterChanging(value);
					this.SendPropertyChanging();
					this._Quarter = value;
					this.SendPropertyChanged("Quarter");
					this.OnQuarterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
		public int Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string MonthName
		{
			get
			{
				return this._MonthName;
			}
			set
			{
				if ((this._MonthName != value))
				{
					this.OnMonthNameChanging(value);
					this.SendPropertyChanging();
					this._MonthName = value;
					this.SendPropertyChanged("MonthName");
					this.OnMonthNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfMonth", DbType="Int NOT NULL")]
		public int DayOfMonth
		{
			get
			{
				return this._DayOfMonth;
			}
			set
			{
				if ((this._DayOfMonth != value))
				{
					this.OnDayOfMonthChanging(value);
					this.SendPropertyChanging();
					this._DayOfMonth = value;
					this.SendPropertyChanged("DayOfMonth");
					this.OnDayOfMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfWeek", DbType="Int NOT NULL")]
		public int DayOfWeek
		{
			get
			{
				return this._DayOfWeek;
			}
			set
			{
				if ((this._DayOfWeek != value))
				{
					this.OnDayOfWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfWeek = value;
					this.SendPropertyChanged("DayOfWeek");
					this.OnDayOfWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DayName
		{
			get
			{
				return this._DayName;
			}
			set
			{
				if ((this._DayName != value))
				{
					this.OnDayNameChanging(value);
					this.SendPropertyChanging();
					this._DayName = value;
					this.SendPropertyChanged("DayName");
					this.OnDayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isHoliday", DbType="Bit NOT NULL")]
		public bool isHoliday
		{
			get
			{
				return this._isHoliday;
			}
			set
			{
				if ((this._isHoliday != value))
				{
					this.OnisHolidayChanging(value);
					this.SendPropertyChanging();
					this._isHoliday = value;
					this.SendPropertyChanged("isHoliday");
					this.OnisHolidayChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemAmenities")]
	public partial class ItemAmenity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private long _ItemID;
		
		private long _AmenityID;
		
		private EntityRef<Amenity> _Amenity;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnItemIDChanging(long value);
    partial void OnItemIDChanged();
    partial void OnAmenityIDChanging(long value);
    partial void OnAmenityIDChanged();
    #endregion
		
		public ItemAmenity()
		{
			this._Amenity = default(EntityRef<Amenity>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="BigInt NOT NULL")]
		public long ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmenityID", DbType="BigInt NOT NULL")]
		public long AmenityID
		{
			get
			{
				return this._AmenityID;
			}
			set
			{
				if ((this._AmenityID != value))
				{
					if (this._Amenity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAmenityIDChanging(value);
					this.SendPropertyChanging();
					this._AmenityID = value;
					this.SendPropertyChanged("AmenityID");
					this.OnAmenityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Amenity_ItemAmenity", Storage="_Amenity", ThisKey="AmenityID", OtherKey="ID", IsForeignKey=true)]
		public Amenity Amenity
		{
			get
			{
				return this._Amenity.Entity;
			}
			set
			{
				Amenity previousValue = this._Amenity.Entity;
				if (((previousValue != value) 
							|| (this._Amenity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Amenity.Entity = null;
						previousValue.ItemAmenities.Remove(this);
					}
					this._Amenity.Entity = value;
					if ((value != null))
					{
						value.ItemAmenities.Add(this);
						this._AmenityID = value.ID;
					}
					else
					{
						this._AmenityID = default(long);
					}
					this.SendPropertyChanged("Amenity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemAmenity", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemAmenities.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemAmenities.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(long);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemAttractions")]
	public partial class ItemAttraction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private long _ItemID;
		
		private long _AttractionID;
		
		private System.Nullable<decimal> _Distance;
		
		private System.Nullable<long> _DurationOnFoot;
		
		private System.Nullable<long> _DurationByCar;
		
		private EntityRef<Attraction> _Attraction;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnItemIDChanging(long value);
    partial void OnItemIDChanged();
    partial void OnAttractionIDChanging(long value);
    partial void OnAttractionIDChanged();
    partial void OnDistanceChanging(System.Nullable<decimal> value);
    partial void OnDistanceChanged();
    partial void OnDurationOnFootChanging(System.Nullable<long> value);
    partial void OnDurationOnFootChanged();
    partial void OnDurationByCarChanging(System.Nullable<long> value);
    partial void OnDurationByCarChanged();
    #endregion
		
		public ItemAttraction()
		{
			this._Attraction = default(EntityRef<Attraction>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="BigInt NOT NULL")]
		public long ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionID", DbType="BigInt NOT NULL")]
		public long AttractionID
		{
			get
			{
				return this._AttractionID;
			}
			set
			{
				if ((this._AttractionID != value))
				{
					if (this._Attraction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttractionIDChanging(value);
					this.SendPropertyChanging();
					this._AttractionID = value;
					this.SendPropertyChanged("AttractionID");
					this.OnAttractionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Decimal(5,1)")]
		public System.Nullable<decimal> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationOnFoot", DbType="BigInt")]
		public System.Nullable<long> DurationOnFoot
		{
			get
			{
				return this._DurationOnFoot;
			}
			set
			{
				if ((this._DurationOnFoot != value))
				{
					this.OnDurationOnFootChanging(value);
					this.SendPropertyChanging();
					this._DurationOnFoot = value;
					this.SendPropertyChanged("DurationOnFoot");
					this.OnDurationOnFootChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationByCar", DbType="BigInt")]
		public System.Nullable<long> DurationByCar
		{
			get
			{
				return this._DurationByCar;
			}
			set
			{
				if ((this._DurationByCar != value))
				{
					this.OnDurationByCarChanging(value);
					this.SendPropertyChanging();
					this._DurationByCar = value;
					this.SendPropertyChanged("DurationByCar");
					this.OnDurationByCarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attraction_ItemAttraction", Storage="_Attraction", ThisKey="AttractionID", OtherKey="ID", IsForeignKey=true)]
		public Attraction Attraction
		{
			get
			{
				return this._Attraction.Entity;
			}
			set
			{
				Attraction previousValue = this._Attraction.Entity;
				if (((previousValue != value) 
							|| (this._Attraction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attraction.Entity = null;
						previousValue.ItemAttractions.Remove(this);
					}
					this._Attraction.Entity = value;
					if ((value != null))
					{
						value.ItemAttractions.Add(this);
						this._AttractionID = value.ID;
					}
					else
					{
						this._AttractionID = default(long);
					}
					this.SendPropertyChanged("Attraction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemAttraction", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemAttractions.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemAttractions.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(long);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemPictures")]
	public partial class ItemPicture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private long _ItemID;
		
		private string _PictureFileName;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnItemIDChanging(long value);
    partial void OnItemIDChanged();
    partial void OnPictureFileNameChanging(string value);
    partial void OnPictureFileNameChanged();
    #endregion
		
		public ItemPicture()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="BigInt NOT NULL")]
		public long ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureFileName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string PictureFileName
		{
			get
			{
				return this._PictureFileName;
			}
			set
			{
				if ((this._PictureFileName != value))
				{
					this.OnPictureFileNameChanging(value);
					this.SendPropertyChanging();
					this._PictureFileName = value;
					this.SendPropertyChanged("PictureFileName");
					this.OnPictureFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemPicture", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemPictures.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemPictures.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(long);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemPrices")]
	public partial class ItemPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private long _ItemID;
		
		private System.DateTime _Date;
		
		private decimal _Price;
		
		private long _CancellationPolicyID;
		
		private EntityRef<CancellationPolicy> _CancellationPolicy;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnItemIDChanging(long value);
    partial void OnItemIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnCancellationPolicyIDChanging(long value);
    partial void OnCancellationPolicyIDChanged();
    #endregion
		
		public ItemPrice()
		{
			this._CancellationPolicy = default(EntityRef<CancellationPolicy>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="BigInt NOT NULL")]
		public long ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(10,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CancellationPolicyID", DbType="BigInt NOT NULL")]
		public long CancellationPolicyID
		{
			get
			{
				return this._CancellationPolicyID;
			}
			set
			{
				if ((this._CancellationPolicyID != value))
				{
					if (this._CancellationPolicy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCancellationPolicyIDChanging(value);
					this.SendPropertyChanging();
					this._CancellationPolicyID = value;
					this.SendPropertyChanged("CancellationPolicyID");
					this.OnCancellationPolicyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CancellationPolicy_ItemPrice", Storage="_CancellationPolicy", ThisKey="CancellationPolicyID", OtherKey="ID", IsForeignKey=true)]
		public CancellationPolicy CancellationPolicy
		{
			get
			{
				return this._CancellationPolicy.Entity;
			}
			set
			{
				CancellationPolicy previousValue = this._CancellationPolicy.Entity;
				if (((previousValue != value) 
							|| (this._CancellationPolicy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CancellationPolicy.Entity = null;
						previousValue.ItemPrices.Remove(this);
					}
					this._CancellationPolicy.Entity = value;
					if ((value != null))
					{
						value.ItemPrices.Add(this);
						this._CancellationPolicyID = value.ID;
					}
					else
					{
						this._CancellationPolicyID = default(long);
					}
					this.SendPropertyChanged("CancellationPolicy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemPrice", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemPrices.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemPrices.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(long);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private long _UserID;
		
		private long _ItemTypeID;
		
		private long _AreaID;
		
		private string _Title;
		
		private int _Capacity;
		
		private int _NumberOfBeds;
		
		private int _NumberOfBedrooms;
		
		private int _NumberOfBathrooms;
		
		private string _ExactAddress;
		
		private string _ApproximateAddress;
		
		private string _Description;
		
		private string _HostRules;
		
		private int _MinimumNights;
		
		private int _MaximumNights;
		
		private EntitySet<ItemAmenity> _ItemAmenities;
		
		private EntitySet<ItemAttraction> _ItemAttractions;
		
		private EntitySet<ItemPicture> _ItemPictures;
		
		private EntitySet<ItemPrice> _ItemPrices;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<ItemType> _ItemType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnItemTypeIDChanging(long value);
    partial void OnItemTypeIDChanged();
    partial void OnAreaIDChanging(long value);
    partial void OnAreaIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnNumberOfBedsChanging(int value);
    partial void OnNumberOfBedsChanged();
    partial void OnNumberOfBedroomsChanging(int value);
    partial void OnNumberOfBedroomsChanged();
    partial void OnNumberOfBathroomsChanging(int value);
    partial void OnNumberOfBathroomsChanged();
    partial void OnExactAddressChanging(string value);
    partial void OnExactAddressChanged();
    partial void OnApproximateAddressChanging(string value);
    partial void OnApproximateAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnHostRulesChanging(string value);
    partial void OnHostRulesChanged();
    partial void OnMinimumNightsChanging(int value);
    partial void OnMinimumNightsChanged();
    partial void OnMaximumNightsChanging(int value);
    partial void OnMaximumNightsChanged();
    #endregion
		
		public Item()
		{
			this._ItemAmenities = new EntitySet<ItemAmenity>(new Action<ItemAmenity>(this.attach_ItemAmenities), new Action<ItemAmenity>(this.detach_ItemAmenities));
			this._ItemAttractions = new EntitySet<ItemAttraction>(new Action<ItemAttraction>(this.attach_ItemAttractions), new Action<ItemAttraction>(this.detach_ItemAttractions));
			this._ItemPictures = new EntitySet<ItemPicture>(new Action<ItemPicture>(this.attach_ItemPictures), new Action<ItemPicture>(this.detach_ItemPictures));
			this._ItemPrices = new EntitySet<ItemPrice>(new Action<ItemPrice>(this.attach_ItemPrices), new Action<ItemPrice>(this.detach_ItemPrices));
			this._Area = default(EntityRef<Area>);
			this._ItemType = default(EntityRef<ItemType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTypeID", DbType="BigInt NOT NULL")]
		public long ItemTypeID
		{
			get
			{
				return this._ItemTypeID;
			}
			set
			{
				if ((this._ItemTypeID != value))
				{
					if (this._ItemType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ItemTypeID = value;
					this.SendPropertyChanged("ItemTypeID");
					this.OnItemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="BigInt NOT NULL")]
		public long AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfBeds", DbType="Int NOT NULL")]
		public int NumberOfBeds
		{
			get
			{
				return this._NumberOfBeds;
			}
			set
			{
				if ((this._NumberOfBeds != value))
				{
					this.OnNumberOfBedsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfBeds = value;
					this.SendPropertyChanged("NumberOfBeds");
					this.OnNumberOfBedsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfBedrooms", DbType="Int NOT NULL")]
		public int NumberOfBedrooms
		{
			get
			{
				return this._NumberOfBedrooms;
			}
			set
			{
				if ((this._NumberOfBedrooms != value))
				{
					this.OnNumberOfBedroomsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfBedrooms = value;
					this.SendPropertyChanged("NumberOfBedrooms");
					this.OnNumberOfBedroomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfBathrooms", DbType="Int NOT NULL")]
		public int NumberOfBathrooms
		{
			get
			{
				return this._NumberOfBathrooms;
			}
			set
			{
				if ((this._NumberOfBathrooms != value))
				{
					this.OnNumberOfBathroomsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfBathrooms = value;
					this.SendPropertyChanged("NumberOfBathrooms");
					this.OnNumberOfBathroomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExactAddress", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ExactAddress
		{
			get
			{
				return this._ExactAddress;
			}
			set
			{
				if ((this._ExactAddress != value))
				{
					this.OnExactAddressChanging(value);
					this.SendPropertyChanging();
					this._ExactAddress = value;
					this.SendPropertyChanged("ExactAddress");
					this.OnExactAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproximateAddress", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string ApproximateAddress
		{
			get
			{
				return this._ApproximateAddress;
			}
			set
			{
				if ((this._ApproximateAddress != value))
				{
					this.OnApproximateAddressChanging(value);
					this.SendPropertyChanging();
					this._ApproximateAddress = value;
					this.SendPropertyChanged("ApproximateAddress");
					this.OnApproximateAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostRules", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string HostRules
		{
			get
			{
				return this._HostRules;
			}
			set
			{
				if ((this._HostRules != value))
				{
					this.OnHostRulesChanging(value);
					this.SendPropertyChanging();
					this._HostRules = value;
					this.SendPropertyChanged("HostRules");
					this.OnHostRulesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumNights", DbType="Int NOT NULL")]
		public int MinimumNights
		{
			get
			{
				return this._MinimumNights;
			}
			set
			{
				if ((this._MinimumNights != value))
				{
					this.OnMinimumNightsChanging(value);
					this.SendPropertyChanging();
					this._MinimumNights = value;
					this.SendPropertyChanged("MinimumNights");
					this.OnMinimumNightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumNights", DbType="Int NOT NULL")]
		public int MaximumNights
		{
			get
			{
				return this._MaximumNights;
			}
			set
			{
				if ((this._MaximumNights != value))
				{
					this.OnMaximumNightsChanging(value);
					this.SendPropertyChanging();
					this._MaximumNights = value;
					this.SendPropertyChanged("MaximumNights");
					this.OnMaximumNightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemAmenity", Storage="_ItemAmenities", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<ItemAmenity> ItemAmenities
		{
			get
			{
				return this._ItemAmenities;
			}
			set
			{
				this._ItemAmenities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemAttraction", Storage="_ItemAttractions", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<ItemAttraction> ItemAttractions
		{
			get
			{
				return this._ItemAttractions;
			}
			set
			{
				this._ItemAttractions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemPicture", Storage="_ItemPictures", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<ItemPicture> ItemPictures
		{
			get
			{
				return this._ItemPictures;
			}
			set
			{
				this._ItemPictures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemPrice", Storage="_ItemPrices", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<ItemPrice> ItemPrices
		{
			get
			{
				return this._ItemPrices;
			}
			set
			{
				this._ItemPrices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Item", Storage="_Area", ThisKey="AreaID", OtherKey="ID", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._AreaID = value.ID;
					}
					else
					{
						this._AreaID = default(long);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_Item", Storage="_ItemType", ThisKey="ItemTypeID", OtherKey="ID", IsForeignKey=true)]
		public ItemType ItemType
		{
			get
			{
				return this._ItemType.Entity;
			}
			set
			{
				ItemType previousValue = this._ItemType.Entity;
				if (((previousValue != value) 
							|| (this._ItemType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemType.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._ItemType.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._ItemTypeID = value.ID;
					}
					else
					{
						this._ItemTypeID = default(long);
					}
					this.SendPropertyChanged("ItemType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Item", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemAmenities(ItemAmenity entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ItemAmenities(ItemAmenity entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_ItemAttractions(ItemAttraction entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ItemAttractions(ItemAttraction entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_ItemPictures(ItemPicture entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ItemPictures(ItemPicture entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_ItemPrices(ItemPrice entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ItemPrices(ItemPrice entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemTypes")]
	public partial class ItemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ItemType()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_Item", Storage="_Items", ThisKey="ID", OtherKey="ItemTypeID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private long _UserID;
		
		private long _TransactionTypeID;
		
		private decimal _Amount;
		
		private System.DateTime _TransactionDate;
		
		private string _GatewayReturnID;
		
		private EntityRef<TransactionType> _TransactionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnTransactionTypeIDChanging(long value);
    partial void OnTransactionTypeIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnGatewayReturnIDChanging(string value);
    partial void OnGatewayReturnIDChanged();
    #endregion
		
		public Transaction()
		{
			this._TransactionType = default(EntityRef<TransactionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionTypeID", DbType="BigInt NOT NULL")]
		public long TransactionTypeID
		{
			get
			{
				return this._TransactionTypeID;
			}
			set
			{
				if ((this._TransactionTypeID != value))
				{
					if (this._TransactionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionTypeID = value;
					this.SendPropertyChanged("TransactionTypeID");
					this.OnTransactionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="Date NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GatewayReturnID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GatewayReturnID
		{
			get
			{
				return this._GatewayReturnID;
			}
			set
			{
				if ((this._GatewayReturnID != value))
				{
					this.OnGatewayReturnIDChanging(value);
					this.SendPropertyChanging();
					this._GatewayReturnID = value;
					this.SendPropertyChanged("GatewayReturnID");
					this.OnGatewayReturnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransactionType_Transaction", Storage="_TransactionType", ThisKey="TransactionTypeID", OtherKey="ID", IsForeignKey=true)]
		public TransactionType TransactionType
		{
			get
			{
				return this._TransactionType.Entity;
			}
			set
			{
				TransactionType previousValue = this._TransactionType.Entity;
				if (((previousValue != value) 
							|| (this._TransactionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransactionType.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._TransactionType.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._TransactionTypeID = value.ID;
					}
					else
					{
						this._TransactionTypeID = default(long);
					}
					this.SendPropertyChanged("TransactionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionTypes")]
	public partial class TransactionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TransactionType()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransactionType_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="TransactionTypeID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.TransactionType = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.TransactionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _GUID;
		
		private long _UserTypeID;
		
		private string _Username;
		
		private string _Password;
		
		private string _FullName;
		
		private bool _Gender;
		
		private System.DateTime _BirthDate;
		
		private int _FamilyCount;
		
		private EntitySet<Item> _Items;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnUserTypeIDChanging(long value);
    partial void OnUserTypeIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnFamilyCountChanging(int value);
    partial void OnFamilyCountChanged();
    #endregion
		
		public User()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", DbType="BigInt NOT NULL")]
		public long UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyCount", DbType="Int NOT NULL")]
		public int FamilyCount
		{
			get
			{
				return this._FamilyCount;
			}
			set
			{
				if ((this._FamilyCount != value))
				{
					this.OnFamilyCountChanging(value);
					this.SendPropertyChanging();
					this._FamilyCount = value;
					this.SendPropertyChanged("FamilyCount");
					this.OnFamilyCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Item", Storage="_Items", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType", ThisKey="UserTypeID", OtherKey="ID", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserTypeID = value.ID;
					}
					else
					{
						this._UserTypeID = default(long);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
